{
  "name": "import-sorter-redux",
  "version": "0.1.5",
  "displayName": "Import Sorter Redux",
  "description": "A powerful Visual Studio Code extension that automates the sorting of TypeScript imports based on a customizable configuration. Maintain code organization effortlessly!",
  "icon": "assets/import-sorter-redux-logo-128x128.png",
  "keywords": [
    "typescript",
    "imports",
    "sort",
    "order",
    "sort imports",
    "extension",
    "code organization",
    "automate",
    "configuration",
    "enhancement",
    "development",
    "tool"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/rmolinamir/import-sorter-redux.git"
  },
  "license": "MIT",
  "publisher": "rmolinamir",
  "categories": [
    "Formatters",
    "Linters"
  ],
  "activationEvents": [
    "onLanguage:javascript",
    "onLanguage:javascriptreact",
    "onLanguage:typescript",
    "onLanguage:typescriptreact",
    "onCommand:extension.sortImports",
    "onCommand:extension.sortImportsInDirectory"
  ],
  "main": "./out/src/extension",
  "scripts": {
    "build": "tsc --project tsconfig.build.json",
    "bundle": "esbuild ./src/extension.ts --bundle --outfile=out/src/extension.js --external:vscode --format=cjs --platform=node",
    "clean:deps": "find . -name 'node_modules' -type d -prune -exec rm -rf '{}' +",
    "clean:out": "find ./lib -name 'out' -type d -prune -exec rm -rf '{}' +",
    "clean:pnpm": "find . -name 'pnpm-lock.yaml' -type f -prune -exec rm -rf '{}' +",
    "clean:tmp": "find ./lib -name 'tmp' -type d -prune -exec rm -rf '{}' +",
    "clean": "pnpm clean:deps && pnpm clean:out && pnpm clean:pnpm && pnpm clean:tmp",
    "lint:fix": "tsc --noEmit && eslint --fix",
    "lint:prepublish": "tsc --project tsconfig.build.json --noEmit && eslint",
    "lint": "tsc --noEmit && eslint",
    "prebuild": "rm -rf tsconfig.build.tsbuildinfo ./out",
    "prebundle": "rm -rf tsconfig.build.tsbuildinfo ./out",
    "test:vscode": "node out/test/main.js",
    "test:watch": "pnpm mocha --watch",
    "test": "pnpm mocha",
    "vscode:login": "pnpm vsce login rmolinamir",
    "vscode:publish": "pnpm release-it",
    "watch": "tsc --project tsconfig.build.json --watch"
  },
  "dependencies": {
    "esbuild": "^0.17.19",
    "glob": "~10.2.5",
    "lodash": "~4.17.21",
    "rxjs": "7.8.1",
    "typescript": "~5.0.4"
  },
  "devDependencies": {
    "@config/eslint": "workspace:*",
    "@config/mocha": "workspace:*",
    "@config/tsconfig": "workspace:*",
    "@faker-js/faker": "~8.0.1",
    "@release-it/conventional-changelog": "~5.1.1",
    "@types/chai": "~4.3.5",
    "@types/lodash": "4.14.194",
    "@types/mocha": "~10.0.1",
    "@types/node": "~16.11.7",
    "@types/vscode": "^1.33.0",
    "@vscode/test-electron": "~2.3.2",
    "@vscode/vsce": "~2.19.0",
    "chai": "~4.3.7",
    "commitizen": "~4.3.0",
    "cz-conventional-changelog": "~3.3.0",
    "mocha": "~10.2.0",
    "release-it": "~15.10.3",
    "vscode-nls": "~5.2.0",
    "vscode-test": "~1.6.1"
  },
  "config": {
    "commitizen": {
      "path": "./node_modules/cz-conventional-changelog",
      "disableScopeLowerCase": false,
      "disableSubjectLowerCase": false,
      "maxHeaderWidth": 100,
      "maxLineWidth": 100
    }
  },
  "engines": {
    "node": ">=16.0.0",
    "npm": ">=7.0.0",
    "vscode": ">=1.33.0"
  },
  "packageManager": "pnpm@8.3.1",
  "contributes": {
    "commands": [
      {
        "command": "extension.sortImports",
        "title": "%command.sortImports%",
        "category": "%commands.category%"
      },
      {
        "command": "extension.sortImportsInDirectory",
        "title": "%command.sortImportsInDirectory%",
        "category": "%commands.category%"
      }
    ],
    "keybindings": [
      {
        "command": "extension.sortImports",
        "key": "ctrl+alt+o",
        "when": "editorTextFocus && !editorReadonly"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "extension.sortImportsInDirectory",
          "group": "1_modification",
          "when": "explorerResourceIsFolder && config.importSorter.generalConfiguration.sortImportsInDirectory"
        },
        {
          "command": "extension.sortImports",
          "group": "1_modification",
          "when": "!explorerResourceIsFolder && isFileSystemResource"
        }
      ],
      "editor/context": [
        {
          "command": "extension.sortImports",
          "group": "1_modification",
          "when": "!explorerResourceIsFolder && isFileSystemResource"
        }
      ]
    },
    "configuration": {
      "type": "object",
      "title": "%configuration.title%",
      "properties": {
        "importSorter.generalConfiguration.configurationFilePath": {
          "type": "string",
          "default": "./import-sorter.json",
          "description": "Specifies the name of the default configuration file."
        },
        "importSorter.generalConfiguration.sortImportsInDirectory": {
          "type": "boolean",
          "default": true,
          "description": "Enables the menu option for sorting imports in a directory."
        },
        "importSorter.generalConfiguration.sortOnBeforeSave": {
          "type": "boolean",
          "default": false,
          "description": "Enables sorting imports before saving each document."
        },
        "importSorter.generalConfiguration.exclude": {
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "description": "Excludes files from sorting based on a regular expression that matches the entire file path. The file path separator is normalized to '/'."
        },
        "importSorter.sortConfiguration.importMembers.order": {
          "enum": [
            "caseInsensitive",
            "lowercaseFirst",
            "lowercaseLast",
            "unsorted"
          ],
          "default": "caseInsensitive",
          "description": "Specifies the sort order of import members within curly brackets."
        },
        "importSorter.sortConfiguration.importMembers.direction": {
          "enum": [
            "asc",
            "desc"
          ],
          "default": "asc",
          "description": "Specifies the sort direction of import members within curly brackets."
        },
        "importSorter.sortConfiguration.importPaths.order": {
          "enum": [
            "caseInsensitive",
            "lowercaseFirst",
            "lowercaseLast",
            "unsorted"
          ],
          "default": "caseInsensitive",
          "description": "Specifies the sort order of import paths."
        },
        "importSorter.sortConfiguration.importPaths.direction": {
          "enum": [
            "asc",
            "desc"
          ],
          "default": "asc",
          "description": "Specifies the sort direction of import paths."
        },
        "importSorter.sortConfiguration.joinImportPaths": {
          "type": "boolean",
          "default": true,
          "description": "Combines imports with the same path."
        },
        "importSorter.sortConfiguration.removeUnusedImports": {
          "type": "boolean",
          "default": false,
          "description": "Removes unused imports that do not have explicit side effects."
        },
        "importSorter.sortConfiguration.removeUnusedDefaultImports": {
          "type": "boolean",
          "default": false,
          "description": "Applies only when 'removeUnusedImports' is enabled. Removes default imports if they are not explicitly used in the source code."
        },
        "importSorter.sortConfiguration.customOrderingRules.defaultOrderLevel": {
          "type": "number",
          "default": 20,
          "description": "Specifies the default order level for imports not included in the custom ordering rules."
        },
        "importSorter.sortConfiguration.customOrderingRules.defaultNumberOfEmptyLinesAfterGroup": {
          "type": "number",
          "default": 0,
          "description": "Specifies the default number of empty lines after any import group. This has lower priority than empty lines defined in rules."
        },
        "importSorter.sortConfiguration.customOrderingRules.disableDefaultOrderSort": {
          "type": "boolean",
          "default": false,
          "description": "Disables sorting of imports within the default group."
        },
        "importSorter.sortConfiguration.customOrderingRules.rules": {
          "type": "array",
          "default": [
            {
              "type": "importMember",
              "regex": "^$",
              "orderLevel": 5,
              "disableSort": true
            },
            {
              "regex": "^[^.@]",
              "orderLevel": 10,
              "disableSort": false
            },
            {
              "regex": "^[@]",
              "orderLevel": 15,
              "disableSort": false
            },
            {
              "regex": "^[.]",
              "orderLevel": 30,
              "disableSort": false
            }
          ],
          "description": "Specifies custom ordering rules for import groups."
        },
        "importSorter.importStringConfiguration.tabSize": {
          "type": "number",
          "default": 4,
          "description": "Specifies the number of spaces for indentation when breaking imports into multiple lines. If 'tabType' is set to 'tab', the value defines the size of a tab in number of spaces."
        },
        "importSorter.importStringConfiguration.tabType": {
          "enum": [
            "space",
            "tab"
          ],
          "default": "space",
          "description": "Defines the character used for indentation on each new line of an import expression."
        },
        "importSorter.importStringConfiguration.numberOfEmptyLinesAfterAllImports": {
          "type": "number",
          "default": 1,
          "description": "Specifies the number of empty lines after the last sorted import."
        },
        "importSorter.importStringConfiguration.quoteMark": {
          "enum": [
            "auto",
            "single",
            "double"
          ],
          "default": "auto",
          "description": "Specifies the type of quotes used for import paths."
        },
        "importSorter.importStringConfiguration.maximumNumberOfImportExpressionsPerLine.type": {
          "enum": [
            "maxLineLength",
            "words",
            "newLineEachExpressionAfterCountLimit",
            "newLineEachExpressionAfterCountLimitExceptIfOnlyOne"
          ],
          "default": "maxLineLength",
          "description": "Specifies the type of length restriction before an import is moved to a new line."
        },
        "importSorter.importStringConfiguration.maximumNumberOfImportExpressionsPerLine.count": {
          "type": "number",
          "default": 80,
          "description": "Specifies the maximum number of import expressions allowed on a single line."
        },
        "importSorter.importStringConfiguration.spacingPerImportExpression.afterStartingBracket": {
          "type": "number",
          "default": 1,
          "description": "Specifies the number of spaces after the opening curly bracket '{'."
        },
        "importSorter.importStringConfiguration.spacingPerImportExpression.beforeEndingBracket": {
          "type": "number",
          "default": 1,
          "description": "Specifies the number of spaces before the closing curly bracket '}'."
        },
        "importSorter.importStringConfiguration.spacingPerImportExpression.beforeComma": {
          "type": "number",
          "default": 0,
          "description": "Specifies the number of spaces before a comma between import expressions."
        },
        "importSorter.importStringConfiguration.spacingPerImportExpression.afterComma": {
          "type": "number",
          "default": 1,
          "description": "Specifies the number of spaces after a comma between import expressions."
        },
        "importSorter.importStringConfiguration.trailingComma": {
          "enum": [
            "none",
            "always",
            "multiLine"
          ],
          "default": "none",
          "description": "Specifies the usage of a trailing comma at the end of import declarations. 'none' means no trailing comma, 'always' means a trailing comma for both single-line and multi-line imports, 'multiLine' means a trailing comma only for multi-line imports."
        },
        "importSorter.importStringConfiguration.hasSemicolon": {
          "type": "boolean",
          "default": true,
          "description": "Specifies whether import declarations should end with a semicolon."
        }
      }
    }
  }
}
